(function($) {
    $(document).ready(function() {
        $('.cloud-zoom, .cloud-zoom-gallery').CloudZoom()  //第三次调用cloudZoom方法
        // $('.cloud-zoom, .cloud-zoom-gallery')获得了所有的a元素
    });
    function format(str) {
        //arguments是用来传参数的，把参数作为数组传递，不用在函数中声明就可以使用
        //arguments[0]是宽度   ;   arguments[1]是高度；
        for (var i = 1; i < arguments.length; i++) {
            //str.replace()是替换函数，第一个参数是替换规则，第二个参数是替换文本，str是被替换文本
            str = str.replace('%' + (i - 1), arguments[i])
            // console.log(str);
            // alert(str);
        }

        return str
    }
    //CloudZoom是主函数,运行一次调用4次本函数
    function CloudZoom(jWin, opts) {
        var sImg = $('img', jWin);    //sImg是一个images对象, jWin表示a#zoom1标签; 这是一个多条件选择器
        // sImg就是一个图片对象
        // console.log(sImg);
        
        var img1;
        var img2;
        var zoomDiv = null;
        var $mouseTrap = null;
        var lens = null;
        var $tint = null;
        var softFocus = null;
        var $ie6Fix = null;
        var zoomImage;
        var controlTimer = 0;
        var cw, ch;
        var destU = 0;
        var destV = 0;
        var currV = 0;
        var currU = 0;
        var filesLoaded = 0;
        var mx, my;
        var ctx = this, zw;
        // alert(this[0]);
        // setTimeout是定时函数，第一个参数是执行代码，第二个参数是等待时间
        // 如果创建mouseTrap div失败，就弹出一个loading...提示框
        // mouseTrap div用来创建蒙版
        setTimeout(function() {
            // alert($mouseTrap[0]);
            if ($mouseTrap === null) {
                var w = jWin.width();
                console.log(w);
                jWin.parent().append(format('<div style="border:2px solid #000;width:%0px;position:absolute;top:75%;left:%1px;text-align:center" class="cloud-zoom-loading" >Loading...</div>', w / 3, (w / 2) - (w / 6))).find(':last').css('opacity', 0.5)
            }
        },
        200);
        //这个函数处理IE6兼容性问题, 目前没有用上
        var ie6FixRemove = function() {
            // console.log($ie6Fix);
            if ($ie6Fix !== null) {
                $ie6Fix.remove();
                $ie6Fix = null
            }
        };
        //这个函数目前也没有用上
        this.removeBits = function() {
            // console.log(lens);
            // console.log('lens: '+lens);
            // console.log('$tint: '+$tint);
            // console.log('softFocus: '+softFocus);
            if (lens) {
                lens.remove();
                lens = null
            }
            if ($tint) {
                $tint.remove();
                $tint = null
            }
            if (softFocus) {
                softFocus.remove();
                softFocus = null
            }
            
            ie6FixRemove();
            // $('.cloud-zoom-loading', jWin.parent()).remove()
        };
        this.destroy = function() {
            jWin.data('zoom', null);
            // console.log('$mouseTrap: '+$mouseTrap);
            // console.log('zoomDiv: '+zoomDiv);
            if ($mouseTrap) {
                $mouseTrap.unbind();
                $mouseTrap.remove();
                $mouseTrap = null
            }
            if (zoomDiv) {
                zoomDiv.remove();
                zoomDiv = null
            }

            this.removeBits()
        };
        this.fadedOut = function() {
            if (zoomDiv) {
                zoomDiv.remove();
                zoomDiv = null
            }
            this.removeBits()
        };
        this.controlLoop = function() {
            if (lens) {
                var x = (mx - sImg.offset().left - (cw * 0.5)) >> 0;
                var y = (my - sImg.offset().top - (ch * 0.5)) >> 0;
                if (x < 0) {
                    x = 0
                } else if (x > (sImg.outerWidth() - cw)) {
                    x = (sImg.outerWidth() - cw)
                }
                if (y < 0) {
                    y = 0
                } else if (y > (sImg.outerHeight() - ch)) {
                    y = (sImg.outerHeight() - ch)
                }
                lens.css({
                    left: x,
                    top: y
                });
                lens.css('background-position', ( - x) + 'px ' + ( - y) + 'px');
                destU = (((x) / sImg.outerWidth()) * zoomImage.width) >> 0;
                destV = (((y) / sImg.outerHeight()) * zoomImage.height) >> 0;
                currU += (destU - currU) / opts.smoothMove;
                currV += (destV - currV) / opts.smoothMove;
                zoomDiv.css('background-position', ( - (currU >> 0) + 'px ') + ( - (currV >> 0) + 'px'))
            }
            controlTimer = setTimeout(function() {
                ctx.controlLoop()
            },
            30)
        };
        this.init2 = function(img, id) {
            filesLoaded++;
            if (id === 1) {
                zoomImage = img
            }
            if (filesLoaded === 2) {
                this.init()
            }
        };
        this.init = function() {
            //又使用了多条件选择器
            // $('.cloud-zoom-loading', jWin.parent()).remove();
            //创建mousetrap这个DIV，这个DIV和小图片重合但是在上层
            $mouseTrap = jWin.parent().append(format("<div class='mousetrap' style='background-image:url(\".\");z-index:999;position:absolute;width:%0px;height:%1px;left:%2px;top:%3px;\'></div>", sImg.outerWidth(), sImg.outerHeight(), 0, 0)).find(':last');
            $mouseTrap.bind('mousemove', this,
            function(event) {
                mx = event.pageX;
                my = event.pageY
            });
            $mouseTrap.bind('mouseleave', this,
            function(event) {
                clearTimeout(controlTimer);
                if (lens) {
                    lens.fadeOut(299)
                }
                if ($tint) {
                    $tint.fadeOut(299)
                }
                if (softFocus) {
                    softFocus.fadeOut(299)
                }
                zoomDiv.fadeOut(300,
                function() {
                    ctx.fadedOut()
                });
                return false
            });
            //这里绑定鼠标进入时间,div#mouseTrap是一个和图片重合的DIV，在图片的上层
            // console.log($mouseTrap);
            //this是a.CloudZoom对象
            $mouseTrap.bind('mouseenter', this,
            function(event) {
                mx = event.pageX;
                my = event.pageY;
                zw = event.data;
                if (zoomDiv) {
                    zoomDiv.stop(true, false);
                    zoomDiv.remove()
                }
                var xPos = opts.adjustX,
                yPos = opts.adjustY;
                var siw = sImg.outerWidth();
                var sih = sImg.outerHeight();
                var w = opts.zoomWidth;
                var h = opts.zoomHeight;
                if (opts.zoomWidth == 'auto') {
                    w = siw
                }
                if (opts.zoomHeight == 'auto') {
                    h = sih
                }
                var appendTo = jWin.parent();
                switch (opts.position) {
                case 'top':
                    yPos -= h;
                    break;
                case 'right':
                    xPos += siw;
                    break;
                case 'bottom':
                    yPos += sih;
                    break;
                case 'left':
                    xPos -= w;
                    break;
                case 'inside':
                    w = siw;
                    h = sih;
                    break;
                default:
                    appendTo = $('#' + opts.position);
                    if (!appendTo.length) {
                        appendTo = jWin;
                        xPos += siw;
                        yPos += sih
                    } else {
                        w = appendTo.innerWidth();
                        h = appendTo.innerHeight()
                    }
                }
                //zoomDiv是div#cloud-zoom-big大图DIV对象，这里创建了大图的DIV容器和背景图片
                zoomDiv = appendTo.append(format('<div id="cloud-zoom-big" class="cloud-zoom-big" style="display:none;position:absolute;left:%0px;top:%1px;width:%2px;height:%3px;background-image:url(\'%4\');z-index:99;"></div>', xPos, yPos, w, h, zoomImage.src)).find(':last');
                if (sImg.attr('title') && opts.showTitle) {
                    zoomDiv.append(format('<div class="cloud-zoom-title">%0</div>', sImg.attr('title'))).find(':last').css('opacity', opts.titleOpacity)
                }

                //判断是否是IE6浏览器
                if ($.browser.msie && $.browser.version < 7) {
                    $ie6Fix = $('<iframe frameborder="0" src="#"></iframe>').css({
                        position: "absolute",
                        left: xPos,
                        top: yPos,
                        zIndex: 99,
                        width: w,
                        height: h
                    }).insertBefore(zoomDiv)
                }

                //大图DIV对象淡入
                zoomDiv.fadeIn(500);
                //如果存在小方框（lens）,那么就把它删除掉
                if (lens) {
                    lens.remove();
                    lens = null
                }
                


                //lens = div.cloud-zoom-lens 是鼠标放小图上跟随鼠标的小方框; 这段代码是计算小方框的宽度和高度，它的宽和高按照大图的比例
                //zoomDiv是div#cloud-zoom-big大图DIV对象
                //cw = (240宽小图的宽度 / bigimg大图的宽度 ) * div#cloud-zoom-big大图div的宽度
                // cw = (sImg.outerWidth() / zoomImage.width) * zoomDiv.width();
                cw = 100;    //这里给它一个固定的宽度和高度
                ch = 100;
                //cw = (240宽小图的高度 / bigimg大图的高度 ) * div#cloud-zoom-big大图div的高度
                // ch = (sImg.outerHeight() / zoomImage.height) * zoomDiv.height();
                
                lens = jWin.append(format("<div class = 'cloud-zoom-lens' style='display:none;z-index:98;position:absolute;width:%0px;height:%1px;'></div>", cw, ch)).find(':last');
                // cw和ch是宽度和高度，传递给format函数的arguments数组，替换掉字符串中的数据

                // console.log(zoomDiv);
                // console.log(lens);


                //console.log(lens.css('cursor'));   lens.css('cursor')的值是move;
                $mouseTrap.css('cursor', lens.css('cursor'));
                var noTrans = false;
                if (opts.tint) {
                    //tint用来设置蒙版颜色
                    lens.css('background', 'url("' + sImg.attr('src') + '")');
                    $tint = jWin.append(format('<div style="display:none;position:absolute; left:0px; top:0px; width:%0px; height:%1px; background-color:%2;" >tinttinttinttinttinttint</div>', sImg.outerWidth(), sImg.outerHeight(), opts.tint)).find(':last');
                    $tint.css('opacity', opts.tintOpacity);    //设置蒙版的透明图
                    noTrans = true;
                    $tint.fadeIn(2000)
                }
                //softFocus设置焦点框是否是透明的
                // console.log(sImg.attr('src'));
                //softFocus = ture ; 如果焦点框为空，执行以下代码
                if (opts.softFocus) {
                    // lens.css('background', 'url("' + sImg.attr('src') + '")');
                    // lens.css('background', 'red');
                    softFocus = jWin.append(format('<div class="softFocus" style="position:absolute;display:none;border:12px solid #f60; top:2px; left:2px; width:%0px; height:%1px;" />', sImg.outerWidth() - 2, sImg.outerHeight() - 2, opts.tint)).find(':last');
                    // softFocus.css('background', 'url("' + sImg.attr('src') + '")');
                    softFocus.css('background', 'red');
                    // console.log(softFocus);
                    softFocus.css('opacity', 0.5);
                    noTrans = true;
                    softFocus.fadeIn(500)
                }
                if (!noTrans) {
                    lens.css('opacity', opts.lensOpacity)
                }
                if (opts.position !== 'inside') {
                    lens.fadeIn(500)
                }
                zw.controlLoop();
                return
            })
        };
        img1 = new Image();
        $(img1).load(function() {
            ctx.init2(this, 0)
        });
        img1.src = sImg.attr('src');
        img2 = new Image();
        $(img2).load(function() {
            ctx.init2(this, 1)
        });
        img2.src = jWin.attr('href')
    }
    //$.fn是指jquery的命名空间，加上它的方法和属性，会对每一个jquery实例有效；这里第二次调用CloudZoom方法
    $.fn.CloudZoom = function(options) {
        // console.trace();
        try {
            //让浏览器缓存图片
            document.execCommand("BackgroundImageCache", false, true)
        } catch(e) {}
        this.each(function() {
            var relOpts, opts;
            //eval函数计算并执行其中的JavaScript代码，此处获取元素的rel属性
            // console.log($(this));
            //$(this)是img外层的a标签
            eval('var	a = {' + $(this).attr('rel') + '}');
            relOpts = a;
            // console.log(a);
            if ($(this).is('.cloud-zoom')) {
                //如果是大图的a标签a.cloud-zoom
                $(this).css({
                    'position': 'relative',
                    'display': 'block'
                });
                
                //$('img', $(this))多条件选择器，用逗号分隔；$(条件1，条件2)；该处选择了img元素，并且父元素为a.cloud-zoom
                $('img', $(this)).css({
                    'display': 'block',
                    'border' : '2px solid red'
                });
                if ($(this).parent().attr('id') != 'wrap') {
                    //wrap方法把每个被选元素放置在制定的HTML元素，这里讲a#zoom1元素用div#wrap元素包裹
                    $(this).wrap('<div id="wrap" style="top:0px;z-index:9999;position:relative;border:2px solid blue;"></div>')
                }
                //$.extend方法用来合并对象，这里用来合并默认设置和自定义设置，后面的参数将会覆盖前面的参数
                opts = $.extend({},
                $.fn.CloudZoom.defaults, options);
                // console.log(options;)  这里options的值为空，options的值没有传参数，所以这里的opts的值为默认设置
                // console.log(opts);
                // console.log('=============');
                opts = $.extend({},
                opts, relOpts);
                //relOpts的值为自定义设置的值，所以这里的opts是综合设置，正确的设置值
                // console.log(opts);
                // data(name,value) 方法向被选元素附加数据，或者从被选元素获取数据。数据存储以键值对的形式
                // console.dir(new CloudZoom($(this), opts))
                $(this).data('zoom', new CloudZoom($(this), opts))    //实例化了CloudZoom方法，并且传递了两个参数，第一个参数是DOM对象，第二个参数是自定义设置
                // console.log($(this).data());
            } else if ($(this).is('.cloud-zoom-gallery')) {
                //如果是缩略图的a标签a.cloud-zoom-gallery
                opts = $.extend({},
                relOpts, options);

                // console.log(opts); // 此处获取缩略图的rel属性

                $(this).data('relOpts', opts);

                //bind方法绑定事件，第一个参数是事件event;第二个参数是传递参数；第三个参数是运行函数
                //on方法可以添加一个子元素选择器
                // console.log($(this));  $('this')是三个缩略图的a元素
                $(this).bind('click', $(this),
                function(event) {
                    //点击缩略图，让所有smallImage都切换到缩略图对应的图片

                    var data = event.data.data('relOpts');
                    // console.log($('#' + data.useZoom).data('zoom'));
                    // alert(data+" ");
                    $('#' + data.useZoom).data('zoom').destroy();
                    var aaa = $('#' + data.useZoom).attr('href', event.data.attr('href'));        //设置smallImage的父元素a元素的href属性
                    // console.log('#' + data.useZoom);
                    // console.log(aaa.attr('href'));
                    $('#' + data.useZoom + ' img').attr('src', event.data.data('relOpts').smallImage);   //设置smallImage img的src属性
                    $('#' + event.data.data('relOpts').useZoom).CloudZoom();
                    //$('#' + event.data.data('relOpts').useZoom) = $('#zoom1')
                    return false
                })
            }
        });
        return this
    };
    //默认参数设置
    $.fn.CloudZoom.defaults = {
        zoomWidth: 'auto',    //放大框的宽度
        zoomHeight: 'auto',   //放大框的高度
        position: 'right',    //放大图像显示的位置
        tint: false,           //设置蒙版颜色
        tintOpacity: 0.5,      //设置蒙版透明度
        lensOpacity: 0.5,      //******************看不懂
        softFocus: false,       //焦点框是否为空，false为白色透明蒙版，true为空
        smoothMove: 3,         //平滑移动
        showTitle: true,       //显示放大框的标题
        titleOpacity: 0.5,     //放大框标题的透明度
        adjustX: 0,             //放大框的位移坐标
        adjustY: 0
    }
})(jQuery);